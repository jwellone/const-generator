using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEditor;

namespace jwellone.ConstGenerator.Editor
{
	public class ConstGeneratorManager : UnityEditor.AssetModificationProcessor
	{
		public const string ASSETS_LABEL = "Assets";
		public const string DEFAULT_SCRIPTS_PATH = "Scripts/ConstGenerator";
		public const string FILE_NAME_SUFFIX = "autogenerated";

		private static List<Type> s_enableTypes;

		private static List<Type> EnableTypes
		{
			get
			{
				if (s_enableTypes != null)
				{
					return s_enableTypes;
				}


				var targetType = typeof(IConstGenerator);
				s_enableTypes = AppDomain.CurrentDomain.GetAssemblies().
					SelectMany(a => a.GetTypes()).Where(t => !t.IsAbstract && !t.IsInterface && t.IsClass && targetType.IsAssignableFrom(t)).
					ToList();

				return s_enableTypes;
			}
		}

		[InitializeOnLoadMethod]
		private static void OnInitializeOnLoadMethod()
		{
			s_enableTypes = null;
			var isWrite = !ConstGeneratorSettings.Exists();
			EditorApplication.delayCall += () =>
			{
				ConstGeneratorSettings.Create(EnableTypes);
				if(isWrite)
				{
					Write();
				}
			};
		}

		[SettingsProvider]
		private static SettingsProvider CreateProvider()
		{
			var settings = ConstGeneratorSettings.Instance;
			var provider = AssetSettingsProvider.CreateProviderFromObject("Project/Const Generator", settings);
			var serializedObject = new SerializedObject(settings);

			provider.keywords = SettingsProvider.GetSearchKeywordsFromSerializedObject(serializedObject);
			return provider;
		}

		public static void Write()
		{
			try
			{
				var isRefresh = false;
				foreach (var info in ConstGeneratorSettings.Instance.Infos)
				{
					if (!info.valid)
					{
						continue;
					}

					var filePath = string.Empty;
					CreateGenerator(info.generetorClassName).OnSave(ConstGeneratorSettings.Instance, ref filePath);
					isRefresh = true;
				}

				if (isRefresh)
				{
					AssetDatabase.Refresh();
				}
			}
			catch (Exception ex)
			{
				LogError($"ConstAutoGenerate failed. {ex}");
			}
		}

		private static string[] OnWillSaveAssets(string[] paths)
		{
			try
			{
				var isRefresh = false;
				foreach (var info in ConstGeneratorSettings.Instance.Infos)
				{
					if (!info.valid)
					{
						continue;
					}

					var filePath = string.Empty;
					isRefresh |= CreateGenerator(info.generetorClassName).OnWillSaveAssets(paths, ConstGeneratorSettings.Instance, ref filePath);
				}

				if (isRefresh)
				{
					AssetDatabase.Refresh();
				}
			}
			catch (Exception ex)
			{
				LogError($"ConstAutoGenerate failed. {ex}");
			}

			return paths;
		}

		private static Type GetType(string fullName)
		{
			foreach (var target in EnableTypes)
			{
				if (target.FullName == fullName)
				{
					return target;
				}
			}
			return null;
		}

		private static IConstGenerator CreateGenerator(string className)
		{
			return Activator.CreateInstance(GetType(className)) as IConstGenerator;
		}

		public static void Log(string text)
		{
			if (ConstGeneratorSettings.Instance.LogEnabled)
			{
				Debug.Log($"[ConstGenerator]{text}");
			}
		}

		public static void LogWarning(string text)
		{
			if (ConstGeneratorSettings.Instance.LogEnabled)
			{
				Debug.LogWarning($"[ConstGenerator]{text}");
			}
		}

		public static void LogError(string text)
		{
			if (ConstGeneratorSettings.Instance.LogEnabled)
			{
				Debug.LogError($"[ConstGenerator]{text}");
			}
		}
	}
}
